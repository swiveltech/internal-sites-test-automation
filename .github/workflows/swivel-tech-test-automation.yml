name: Automation Tests - Swivel Tech

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  run-tests:
    runs-on: windows-latest

    steps:
      - name: Set Screen Resolution
        run: |
          # First try to list available resolutions
          $code = @'
          [DllImport("user32.dll")]
          public static extern bool EnumDisplaySettings(string deviceName, int modeNum, ref DEVMODE devMode);
          
          [DllImport("user32.dll")]
          public static extern int ChangeDisplaySettings(ref DEVMODE devMode, int flags);
          
          [StructLayout(LayoutKind.Sequential)]
          public struct DEVMODE {
              [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
              public string dmDeviceName;
              public short dmSpecVersion;
              public short dmDriverVersion;
              public short dmSize;
              public short dmDriverExtra;
              public int dmFields;
              public int dmPositionX;
              public int dmPositionY;
              public int dmDisplayOrientation;
              public int dmDisplayFixedOutput;
              public short dmColor;
              public short dmDuplex;
              public short dmYResolution;
              public short dmTTOption;
              public short dmCollate;
              [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
              public string dmFormName;
              public short dmLogPixels;
              public int dmBitsPerPel;
              public int dmPelsWidth;
              public int dmPelsHeight;
              public int dmDisplayFlags;
              public int dmDisplayFrequency;
              public int dmICMMethod;
              public int dmICMIntent;
              public int dmMediaType;
              public int dmDitherType;
              public int dmReserved1;
              public int dmReserved2;
              public int dmPanningWidth;
              public int dmPanningHeight;
          }
          '@
          
          Add-Type -TypeDefinition $code -Namespace Win32 -Name Display
          
          $dm = New-Object Win32.Display+DEVMODE
          $dm.dmSize = [System.Runtime.InteropServices.Marshal]::SizeOf($dm)
          
          # Try to set the resolution
          $dm.dmPelsWidth = 1920
          $dm.dmPelsHeight = 1080
          $dm.dmBitsPerPel = 32
          $dm.dmDisplayFrequency = 60
          $dm.dmFields = 0x4000000 -bor 0x80000 -bor 0x200000 -bor 0x40000
          
          $result = [Win32.Display]::ChangeDisplaySettings([ref]$dm, 0)
          
          if ($result -eq 0) {
              Write-Output "Resolution changed successfully"
          } else {
              Write-Output "Failed to change resolution. Error code: $result"
              Write-Output "Trying alternative approach..."
              
              # Alternative approach using QRes utility
              $qresPath = "$env:TEMP\qres.exe"
              Invoke-WebRequest -Uri "https://www.winability.com/download/qres.zip" -OutFile "$env:TEMP\qres.zip"
              Expand-Archive -Path "$env:TEMP\qres.zip" -DestinationPath $env:TEMP -Force
              & "$env:TEMP\qres\x64\qres.exe" /x:1920 /y:1080
          }
        shell: pwsh
  
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install Dependencies
        run: |
          npm install --legacy-peer-deps

      # - name: Fix Npm issues
      #   run: |
      #     npm audit fix --force

      - name: Install Allure
        run: npm install -g allure-commandline

      # - name: Install Chrome
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y google-chrome-stable

      # - name: Verify Chrome Installation
      #   run: google-chrome --version

      - name: Run WebdriverIO Tests
        run: npm run swiveltech

      #- name: Find and Save Report Path
      #  run: |
      #    allure generate --clean --single-file allure-results
      # run: |
      #   allure generate ./reports/allure-results --clean -o ./reports
      #   ls reports/

      - name: Generate Timestamp
        shell: pwsh
        run: |
          $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
          echo "TIMESTAMP=$timestamp" >> $env:GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEV_GITHUB_ACTION_ROLE }}
          aws-region: ap-southeast-2

      - name: Upload Report to S3
        shell: pwsh
        run: |
          Rename-Item -Path allure-report/index.html -NewName "index-$env:TIMESTAMP.html"
          aws s3 cp allure-report/index-$env:TIMESTAMP.html s3://internal-test-automation/swivel-tech/

      - name: Send Report via AWS SES
        shell: pwsh
        run: |
          $REPORT_URL="https://internal-test-automation.s3.ap-southeast-2.amazonaws.com/swivel-tech/index-$env:TIMESTAMP.html"

          $htmlContent = "<html><body><h2>Automation Test Report - SwivelTech</h2><p>Click <a href=""$REPORT_URL"">here</a> to view the report.</p></body></html>"

          $messageObj = @{
            Subject = @{ Data = "Automation Test Report - SwivelTech" }
            Body = @{
              Text = @{ Data = "Here is your test report: $REPORT_URL" }
              Html = @{ Data = $htmlContent }
            }
          }

          $messageJson = ConvertTo-Json -Depth 4 -Compress $messageObj

          aws ses send-email --from "serviceaccount@swivelgroup.com.au" --destination "ToAddresses=dilshan@swivelgroup.com.au,shithu@swivelgroup.com.au" --message $messageJson --region "ap-southeast-2"
